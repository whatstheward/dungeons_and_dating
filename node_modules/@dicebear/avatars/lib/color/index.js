"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hexToRgb = require("pure-color/parse/hex");
var rgbToHsv = require("pure-color/convert/rgb2hsv");
var rgbToHex = require("pure-color/convert/rgb2hex");
var hsvToRgb = require("pure-color/convert/hsv2rgb");
var collection_1 = require("./collection");
var Color = /** @class */ (function () {
    function Color(color) {
        if (color === void 0) { color = '#000'; }
        this.alpha = 1;
        if (color[0] == '#') {
            this.hex = color;
        }
        else {
            var match = /(.*)\((.*)\)/.exec(color);
            if (match) {
                var values = match[2].split(',').map(function (val) { return parseInt(val.trim()); });
                switch (match[1].trim()) {
                    case 'rgb':
                        this.rgb = values;
                        break;
                    case 'rgba':
                        this.rgba = values;
                        break;
                    case 'hsv':
                        this.hsv = values;
                        break;
                    default:
                        throw new Error('Unsupported color format: ' + color);
                }
            }
            else {
                throw new Error('Unknown color format: ' + color);
            }
        }
    }
    Color.prototype.clone = function () {
        return new Color('rgb(' + this.rgb.join(',') + ')');
    };
    Object.defineProperty(Color.prototype, "rgb", {
        get: function () {
            return (this.color.rgb = this.color.rgb || (this.color.hex ? this.hexToRgb(this.hex) : this.hsvToRgb(this.hsv)));
        },
        set: function (rgb) {
            if (rgb.length != 3) {
                throw new Error('An array with a length of 3 is expected.');
            }
            this.alpha = 1;
            this.color = {
                rgb: rgb
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "rgba", {
        get: function () {
            return [this.rgb[0], this.rgb[1], this.rgb[2], this.alpha];
        },
        set: function (rgba) {
            if (rgba.length != 4) {
                throw new Error('An array with a length of 3 is expected.');
            }
            this.rgb = [rgba[0], rgba[1], rgba[2]];
            this.alpha = rgba[3];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "hsv", {
        get: function () {
            // Slice array to return copy
            return (this.color.hsv = this.color.hsv || this.rgbToHsv(this.rgb)).slice(0);
        },
        set: function (hsv) {
            if (hsv.length != 3) {
                throw new Error('An array with a length of 3 is expected.');
            }
            this.alpha = 1;
            this.color = {
                hsv: hsv
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Color.prototype, "hex", {
        get: function () {
            // Slice array to return copy
            return (this.color.hex = this.color.hex || this.rgbToHex(this.rgb)).slice(0);
        },
        set: function (hex) {
            this.alpha = 1;
            this.color = {
                hex: hex
            };
        },
        enumerable: true,
        configurable: true
    });
    Color.prototype.brighterThan = function (color, difference) {
        var primaryColorHsv = this.hsv;
        var secondaryColorHsv = color.hsv;
        if (primaryColorHsv[2] >= secondaryColorHsv[2] + difference) {
            return this;
        }
        primaryColorHsv[2] = secondaryColorHsv[2] + difference;
        if (primaryColorHsv[2] > 360) {
            primaryColorHsv[2] = 360;
        }
        this.hsv = primaryColorHsv;
        return this;
    };
    Color.prototype.darkerThan = function (color, difference) {
        var primaryColorHsv = this.hsv;
        var secondaryColorHsv = color.hsv;
        if (primaryColorHsv[2] <= secondaryColorHsv[2] - difference) {
            return this;
        }
        primaryColorHsv[2] = secondaryColorHsv[2] - difference;
        if (primaryColorHsv[2] < 0) {
            primaryColorHsv[2] = 0;
        }
        this.hsv = primaryColorHsv;
        return this;
    };
    Color.prototype.brighterOrDarkerThan = function (color, difference) {
        var primaryColorHsv = this.hsv;
        var secondaryColorHsv = color.hsv;
        if (primaryColorHsv[2] <= secondaryColorHsv[2]) {
            return this.darkerThan(color, difference);
        }
        else {
            return this.brighterThan(color, difference);
        }
    };
    Color.prototype.rgbToHex = function (rgb) {
        return rgbToHex(rgb);
    };
    Color.prototype.hexToRgb = function (hex) {
        return hexToRgb(hex).map(function (val) { return Math.round(val); });
    };
    Color.prototype.rgbToHsv = function (rgb) {
        return rgbToHsv(rgb).map(function (val) { return Math.round(val); });
    };
    Color.prototype.hsvToRgb = function (hsv) {
        return hsvToRgb(hsv).map(function (val) { return Math.round(val); });
    };
    Color.collection = collection_1.default;
    return Color;
}());
exports.default = Color;
//# sourceMappingURL=index.js.map